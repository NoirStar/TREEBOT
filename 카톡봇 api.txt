당신만의 카카오톡 봇을 만들어 보세요!
시작하기 전에, 당신은 JavaScript로 코딩하는 방법을 아셔야 합니다.
response 함수 내에서 replier.reply(String)을 호출하는것으로 답장할수 있습니다.

Api

Api.getContext() : 앱의 컨텍스트를 가져옵니다
Api.reload() 또는 Api.compile() : 모든 스크립트를 재컴파일합니다.
Api.reload("스크립트.js") 또는 Api.compile("스크립트.js") : 특정 스크립트를 재컴파일합니다.
Api.prepare("스크립트.js") : 해당 스크립트가 한번도 컴파일 된 적이 없을 경우에만 컴파일합니다. 컴파일 실패시 에러를 throw하고,스크립트가 존재하지 않을 시 0, 컴파일 성공시 1, 한번이라도 컴파일 된 적이 있을 시 2를 반환합니다.
Api.unload("스크립트.js") : 해당 스크립트를 컴파일되지 않은 상태로 전환합니다.
Api.off() : 모든 스크립트의 전원을 끕니다.
Api.off("스크립트.js") : 해당 스크립트의 전원을 끕니다.
Api.on() : 모든 스크립트의 전원을 켭니다.
Api.on("스크립트.js") : 해당 스크립트의 전원을 켭니다.
Api.isOn("스크립트.js") : 해당 스크립트의 전원 상태를 반환합니다.
Api.isCompiled("스크립트.js") : 해당 스크립트가 컴파일완료 여부를 반환합니다.
Api.isCompiling("스크립트.js") : 해당 스크립트가 컴파일 진행중인지 여부를 반환합니다.
Api.getScriptNames() : 모든 스크립트의 이름을 배열로 반환합니다.
Api.replyRoom(room,message,hideToast=false) : 해당 방에 메시지를 보냅니다. hideToast가 true일 경우 방 세션이 없어도 토스트를 띄우지 않습니다.
Api.canReply(room) : 해당 방에 전송 가능한지 확인합니다.
Api.showToast(title,content) : 토스트 메시지를 띄웁니다.
Api.makeNoti(title,content,id) : 알림을 띄웁니다.
Api.papagoTranslate(sourceLanguage,targetLanguage,content,errorToString=false) : 번역 결과를 제공합니다. sourceLanguage와 targetLanguage의 언어 코드에 관해서는 파파고의 Api문서를 참고하세요. errorToString이 true일 경우 에러를 throw하지 않고 String으로 반환합니다.
Api.gc() : 가비지 컬렉팅을 강제로 시작합니다.

Utils

Utils.getWebText(url:String) : 웹사이트의 HTML을 가져옵니다.
Utils.parse(url:String) : 웹사이트 파싱 결과를 Jsoup Document로 반환합니다.

Log

Log.error(string,viewToast=false) : 로그 화면에 에러 로그를 추가합니다. (viewToast가 true일경우, 토스트 팝업을 표시합니다.)
Log.info(string) : 로그 화면에 정보를 추가합니다.
Log.debug(string) : 로그 화면에 디버그 로그를 추가합니다.
로그는 각각 Log.e,Log.i,Log.d로도 사용할 수 있습니다.

AppData

AppData.putInt/Boolean/String(String key,int/boolean/String data) : 앱 데이터에 데이터를 저장합니다.
AppData.getInt/Boolean/String() : 앱 데이터에서 데이터를 불러옵니다.
AppData.clear() : 앱 데이터를 초기화합니다.
AppData.remove(String key) : 앱 데이터에서 데이터를 지웁니다.

DataBase

DataBase.setDataBase(String fileName,String content) : 파일에 데이터를 덮어씁니다.
DataBase.getDataBase(String fileName) : 파일에서 데이터를 불러옵니다.
DataBase.removeDataBase(String fileName) : 파일을 삭제합니다.
DataBase.appendDataBase(String fileName,String content) : 파일에 데이터를 이어붙입니다.

Bridge

Bridge.getScopeOf(String scriptName) : 해당 스크립트의 스코프를 가져옵니다. 이를통해 다른 스크립트에 접근이 가능합니다.
Bridge.isAllowed(String scriptName) : 스크립트 접근 허용 여부를 반환합니다.

Device

Device : 디바이스 정보를 포함합니다.
.getBuild()
.getAndroidVersionCode()
.getAndroidVersionName()
.getPhoneBrand()
.getPhoneModel()
.isCharging()
.getPlugType()
.getBatteryLevel()
.getBatteryHealth()
.getBatteryTemperature()
.getBatteryVoltage()
.getBatteryStatus()
.getBatteryIntent()

FileStream

FileStream : 파일 읽기/쓰기를 제공합니다.
.read(path): 파일을 읽습니다.
.write(path,content): 파일을 덮어씁니다.
.append(path,content): 파일에 데이터를 이어붙입니다. .remove(path): 파일 또는 폴더를 삭제합니다. 

이 앱에는 Mozilla의 JavaScript 엔진인 Rhino가 사용되었습니다.
라이선스: https://www.mozilla.org/en-US/MPL/2.0

Change Log


2.93

DB가 없을때 DataBase.removeDataBase를 호출하면 발생하는 오류를 해결했습니다.
Api.UIThread가 작동하지 않는 오류를 해결했습니다.
Device객체를 추가했습니다.
봇이 켜진 상태로 설정에서 스크립트 삭제시 봇이 계속 구동되는 문제를 해결했습니다. 단, 다른 파일 탐색기에서 삭제하는것은 주의해주세요.
Api.unload("스크립트이름.js"): 해당 스크립트의 컴파일 상태를 제거합니다.

2.94

Device에 파일읽기쓰기를 넣으면 추후에 보안 관련 분류가 어려워질 것 같아 FileStream.read, FileStream.write로 대체했습니다.
Device.getBatteryStatus를 수정했습니다.
Device.getBatteryIntent를 추가했습니다.
잦은 업데이트 죄송합니다. 업데이트에 좀 더 신중해지도록 하겠습니다.

2.96

추후 구현의 용이성을 도모하여 코틀린으로 전환했습니다.
안드로이드 누가 미만에서 카카오톡 최신버전의 알림 수신 중 방 이름이 잘못 수신되는 오류를 해결했습니다.
카카오톡 구버전과의 연동성도 고려했지만, 카카오톡을 업데이트하는것을 권장합니다.
컴파일 시작/완료 로그에 스크립트 이름을 명시합니다.
ImageDB.getProfileBitmap()이 추가되었습니다.
방 세션 초기화 옵션을 공용설정으로 옮겼습니다.

2.97

Api.UIThread오류를 해결했습니다.

2.98

디버그 룸이 안되는 현상, 없는 DB에 대해 getDataBase요청시 내부 오류가 발생하는 현상 등 중대한 오류를 해결했습니다.
디버그룸의 메시지 입력창이 세로로 확장되도록 변경했습니다.

2.99

스크립트 액티비티 문제를 해결했습니다.
도움말을 개선하였으며, 이제 도움말에서 업데이트 로그를 볼 수 있습니다.

3.00

[내부 테스트] 디버그 룸에서 500자를 초과하는 메시지의 경우 전체보기를 표시하도록 했습니다.(데이터는 온전하게 전달됩니다.)

3.01

(중요) Api.reload(또는 compile), Api.prepare에 인자를 전달하지 않을때 전체 리로드 중 오류가 나는 스크립트에서 정지되지 않도록 수정했습니다.
이제 두번째 인자로 true를 전달하면 오류가 나는 스크립트에서 정지합니다.

3.02

Api.isCompiling("스크립트이름.js")이 추가되었습니다. 인자를 전달하지 않을 경우 하나라도 컴파일중인 스크립트가 있을 시 true를 반환합니다.
지난 업데이트에서 몇가지 업데이트가 적용되지 않은 문제를 해결했습니다.
전역에서 인자없이 Api.compile을 호출 할 시 무한 컴파일이 되는 현상을 방지했습니다.

3.03

DataBase.appendDataBase, FileStream.append가 추가되었습니다. 
DataBase의 setDataBase, FileStream의 write가 이제 파일의 최종 내용을 리턴합니다.(appendDataBase, append도 마찬가지)
DataBase와 FileStream의 각 함수에 이제 경로를 명시할 수 있습니다.
onStartCompile호출 중 에러 발생 시 튕기는 오류를 해결하고, 컴파일을 중지하도록 수정하였습니다.
도움말을 업데이트하였습니다.

3.04

(긴급) 첫 컴파일중 컴파일에러 발생시 앱이 튕기는 문제를 해결했습니다.

3.05

디버그룸에서 replier.reply에 메시지값으로 null전달시 튕기는 문제를 해결했습니다.

